{"version":3,"sources":["index.js"],"names":["canvas","document","getElementById","ctx","getContext","angleIncrement","Math","PI","startX","width","startY","height","thickness","maxDepth","count","branchPropagation","color","createRect","x","y","fillStyle","fillRect","drawLine","x1","y1","x2","y2","lineWidth","strokeStyle","beginPath","moveTo","lineTo","closePath","stroke","drawBranch","angle","depth","endX","sin","endY","cos","newHeight","newThickness","angleStart","trunc","i","drawTree","requestAnimationFrame"],"mappings":"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","file":"src.082cfed4.js","sourceRoot":"..\\src","sourcesContent":["const canvas = document.getElementById('canvas'),\n      ctx = canvas.getContext('2d')\n\nlet angleIncrement = (30 * Math.PI) / 180\n\nconst startX = canvas.width / 2,\n      startY = canvas.height - 120,\n      height = (canvas.height * 7) / 24\n\nlet thickness = 2,\n    maxDepth = 8,\n    count = 0,\n    branchPropagation = 5,\n    color = '#fff'\n\nlet createRect = (x, y, width, height, color) => {\n  ctx.fillStyle = color\n  ctx.fillRect(x, y, width, height)\n}\n\nlet drawLine = (x1, y1, x2, y2, thickness, color) => {\n  ctx.lineWidth = thickness\n  ctx.strokeStyle = color\n  ctx.beginPath()\n  ctx.moveTo(x1, y1)\n  ctx.lineTo(x2, y2)\n  ctx.closePath()\n  ctx.stroke()\n}\n\nlet drawBranch = (x, y, height, thickness, angle, depth) => {\n  if (depth > maxDepth) return\n\n  let endX = x - height * Math.sin(angle),\n      endY = y - height * Math.cos(angle),\n      newHeight = (height * 8) / 12,\n      newThickness = (thickness * 2) / 3,\n      angleStart\n\n  drawLine(x, y, endX, endY, thickness, color)\n\n  angleStart =\n    branchPropagation % 2 === 0\n      ? angle -\n        angleIncrement / 2 -\n        (Math.trunc(branchPropagation / 2) - 1) * angleIncrement\n      : angle - Math.trunc(branchPropagation / 2) * angleIncrement\n\n  for (let i = 0; i < branchPropagation; i++) {\n    drawBranch(\n      endX,\n      endY,\n      newHeight,\n      newThickness,\n      angleStart + i * angleIncrement,\n      depth + 1\n    )\n  }\n}\n\nlet drawTree = () => {\n  createRect(0, 0, canvas.width, canvas.height, '#1b1b1b')\n  angleIncrement -= 0.02\n  drawBranch(startX, startY, height, thickness, 0, Math.PI / 2)\n  requestAnimationFrame(drawTree)\n}\n\ndrawTree()\n"]}